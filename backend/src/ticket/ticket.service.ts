import { BadRequestException, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { In, Repository } from 'typeorm';
import { Ticket } from './entities/ticket.entity';
import { SeatBooking } from 'src/seat/entities/seat_booking.entity';
import { TicketSeatBooking } from './entities/TicketSeatBooking.entity';
import { TicketConcession } from './entities/TicketConcession.entity';
import { ConcessionItem } from 'src/concession-item/entities/concession-item.entity';
import { console } from 'inspector';
import { Movie } from 'src/movie/entities/movie.entity';
import { Hall } from 'src/hall/entities/hall.entity';
import { Showtime } from 'src/showtimes/entities/showtimes.entity';
import { User } from 'src/users/entities/user.entity';
import { MailerService } from 'src/mail/mail.service';
import { BarcodeService } from 'src/barcode/barcode.service';

@Injectable()
export class TicketService {
  constructor(
    @InjectRepository(Ticket)
    private readonly ticketRepository: Repository<Ticket>,

    @InjectRepository(SeatBooking)
    private readonly seatBookingRepository: Repository<SeatBooking>,

    @InjectRepository(TicketSeatBooking)
    private readonly ticketSeatBookingRepository: Repository<TicketSeatBooking>,

    @InjectRepository(TicketConcession)
    private readonly ticketConcessionRepository: Repository<TicketConcession>,

    @InjectRepository(ConcessionItem)
    private readonly concessionItemRepository: Repository<ConcessionItem>,

    @InjectRepository(Showtime)
    private readonly shownTimeRepository: Repository<Showtime>,

    @InjectRepository(Movie)
    private readonly movieRepository: Repository<Movie>,

    @InjectRepository(Hall)
    private readonly hallRepository: Repository<Hall>,

    @InjectRepository(User)
    private readonly userRepository: Repository<User>,

    private readonly mailerService: MailerService,

    private readonly barcodeService: BarcodeService,
  ) {}

  async createTicket(
    data: {
      seat_total_price: number;
      concession_total_price: number;
      seat_booking_ids: string[];
      concessions: { item_id: string; quantity: number }[];
    },
    user_id: string,
  ): Promise<Ticket> {
    const {
      seat_total_price,
      concession_total_price,
      seat_booking_ids,
      concessions,
    } = data;

    const total_price = seat_total_price + concession_total_price;

    // 1. T·∫°o ticket
    const ticket = this.ticketRepository.create({
      user: { id: user_id } as any,
      seat_total_price,
      concession_total_price,
      total_price,
    });

    const savedTicket = await this.ticketRepository.save(ticket);

    // 2. T·∫°o TicketSeatBooking
    console.log('seat_booking_ids', seat_booking_ids);

    const seatBookings = await this.seatBookingRepository.find({
      where: {
        id: In(seat_booking_ids),
      },
    });
    console.log('seatBookings', seatBookings);
    if (seatBookings.length !== seat_booking_ids.length) {
      throw new BadRequestException(
        'M·ªôt ho·∫∑c nhi·ªÅu seat_booking_id kh√¥ng t·ªìn t·∫°i',
      );
    }

    const ticketSeatBookings = seatBookings.map((sb) =>
      this.ticketSeatBookingRepository.create({
        ticket: savedTicket,
        seatBooking: sb,
      }),
    );

    await this.ticketSeatBookingRepository.save(ticketSeatBookings);

    // 3. T·∫°o TicketConcession
    const itemIds = concessions.map((c) => c.item_id);
    const items = await this.concessionItemRepository.find({
      where: {
        id: In(itemIds),
      },
    });

    const ticketConcessions = concessions.map((c) => {
      const item = items.find((i) => i.id === c.item_id);
      if (!item)
        throw new BadRequestException(
          `Kh√¥ng t√¨m th·∫•y item v·ªõi id: ${c.item_id}`,
        );

      return this.ticketConcessionRepository.create({
        ticket: savedTicket,
        item,
        quantity: c.quantity,
        total_price: Number(item.price) * c.quantity,
      });
    });

    await this.ticketConcessionRepository.save(ticketConcessions);

    const ticketWithRelations = await this.ticketRepository.findOne({
      where: { id: savedTicket.id },
      relations: [
        'seatBookings',
        'seatBookings.seatBooking',
        'concessions',
        'concessions.item',
      ],
    });

    if (!ticketWithRelations) {
      throw new BadRequestException('Kh√¥ng t√¨m th·∫•y ticket sau khi t·∫°o');
    }

    return ticketWithRelations;
  }

  async getTicketDetail(ticketId: string): Promise<any> {
    console.log('ticketId', ticketId);
    const ticket = await this.ticketRepository.findOne({
      where: { id: ticketId },
      relations: [
        'user',
        'seatBookings',
        'seatBookings.seatBooking',
        'seatBookings.seatBooking.seat',
        'concessions',
        'concessions.item',
      ],
    });

    if (!ticket) {
      throw new BadRequestException('Kh√¥ng t√¨m th·∫•y v√©');
    }

    const firstSeatBooking = ticket.seatBookings[0]?.seatBooking;

    const [movie, hall, showtime] = await Promise.all([
      this.movieRepository.findOne({
        where: { id: firstSeatBooking?.movie_id },
      }),
      this.hallRepository.findOne({ where: { id: firstSeatBooking?.hall_id } }),
      this.shownTimeRepository.findOne({
        where: { id: firstSeatBooking?.showtime_id },
      }),
    ]);

    return {
      id: ticket.id,
      user_id: ticket.user?.id,
      seat_total_price: ticket.seat_total_price,
      concession_total_price: ticket.concession_total_price,
      total_price: ticket.total_price,
      movie_id: firstSeatBooking?.movie_id,
      hall_id: firstSeatBooking?.hall_id,
      showtime_id: firstSeatBooking?.showtime_id,
      seats: ticket.seatBookings.map((tsb) => ({
        id: tsb.seatBooking.id,
        seat: tsb.seatBooking.seat,
        status: tsb.seatBooking.status,
      })),
      movie,
      hall,
      showtime,
      concessions: ticket.concessions.map((c) => ({
        item: c.item,
        quantity: c.quantity,
        total_price: c.total_price,
      })),
    };
  }

  async getTicketsByUser(userId: string): Promise<any[]> {
    const tickets = await this.ticketRepository.find({
      where: { user: { id: userId } },
      select: ['id'],
      order: { created_at: 'DESC' },
    });

    const ticketDetails = await Promise.all(
      tickets.map((ticket) => this.getTicketDetail(ticket.id)),
    );

    return ticketDetails;
  }

  async ticketInfo(ticketId: string): Promise<any> {
    // 1Ô∏è‚É£ L·∫•y th√¥ng tin v√© v√† c√°c quan h·ªá li√™n quan
    const ticket = await this.ticketRepository.findOne({
      where: { id: ticketId },
      relations: [
        'user',
        'seatBookings',
        'seatBookings.seatBooking',
        'seatBookings.seatBooking.seat',
        'concessions',
        'concessions.item',
      ],
    });

    if (!ticket) {
      throw new BadRequestException('Kh√¥ng t√¨m th·∫•y v√©');
    }

    // 2Ô∏è‚É£ L·∫•y th√¥ng tin gh·∫ø ƒë·∫ßu ti√™n (ƒë·ªÉ truy ra phim, su·∫•t chi·∫øu, ph√≤ng chi·∫øu)
    const firstSeatBooking = ticket.seatBookings[0]?.seatBooking;
    if (!firstSeatBooking) {
      throw new BadRequestException('V√© kh√¥ng c√≥ th√¥ng tin gh·∫ø');
    }

    const [movie, hall, showtime] = await Promise.all([
      this.movieRepository.findOne({
        where: { id: firstSeatBooking.movie_id },
      }),
      this.hallRepository.findOne({ where: { id: firstSeatBooking.hall_id } }),
      this.shownTimeRepository.findOne({
        where: { id: firstSeatBooking.showtime_id },
      }),
    ]);

    if (!movie || !hall || !showtime) {
      throw new BadRequestException(
        'D·ªØ li·ªáu phim, su·∫•t chi·∫øu ho·∫∑c ph√≤ng chi·∫øu kh√¥ng h·ª£p l·ªá',
      );
    }

    // 3Ô∏è‚É£ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    const user = await this.userRepository.findOne({
      where: { id: ticket.user.id },
    });

    if (!user) {
      throw new BadRequestException('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
    }

    const barcodePayload = {
      ticket_id: ticket.id,
      movie: movie.name,
      showtime: showtime.movie_start_time,
      seats: ticket.seatBookings
        .map((s) => s.seatBooking?.seat?.name)
        .filter(Boolean),
      user: {
        id: user.id,
        email: user.email,
      },
    };

    const barcodeUrl =
      await this.barcodeService.generateBarcode(barcodePayload);

    // 4Ô∏è‚É£ Chu·∫©n b·ªã d·ªØ li·ªáu v√©
    const seatNames = ticket.seatBookings
      .map((tsb) => tsb.seatBooking?.seat?.name)
      .filter(Boolean)
      .join(', ');

    const foodList =
      ticket.concessions.length > 0
        ? ticket.concessions
            .map((c) => `${c.item.name} x${c.quantity}`)
            .join(', ')
        : 'Kh√¥ng';

    const emailContent = `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>X√°c nh·∫≠n ƒë·∫∑t v√©</title>
    </head>
    <body style="margin: 0; padding: 0; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f4f4f4;">
      <table role="presentation" style="width: 100%; border-collapse: collapse;">
        <tr>
          <td style="padding: 20px 0;">
            <table role="presentation" style="width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
              
              <!-- Header -->
              <tr>
                <td style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center;">
                  <h1 style="margin: 0; color: #ffffff; font-size: 28px; font-weight: bold;">üé¨ Cinezone</h1>
                  <p style="margin: 10px 0 0 0; color: #ffffff; font-size: 16px;">X√°c nh·∫≠n ƒë·∫∑t v√© th√†nh c√¥ng</p>
                </td>
              </tr>

              <!-- Greeting -->
              <tr>
                <td style="padding: 30px 30px 20px 30px;">
                  <h2 style="margin: 0 0 15px 0; color: #333333; font-size: 22px;">Xin ch√†o ${user.full_name},</h2>
                  <p style="margin: 0; color: #666666; font-size: 15px; line-height: 1.6;">
                    C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa <strong>Cinezone</strong>! 
                    H·ªá th·ªëng x√°c nh·∫≠n b·∫°n ƒë√£ ƒë·∫∑t v√© xem phim th√†nh c√¥ng.
                  </p>
                </td>
              </tr>

              <!-- Barcode Section -->
              <tr>
                <td style="padding: 0 30px;">
                  <table role="presentation" style="width: 100%; background-color: #f8f9ff; border-radius: 8px; padding: 20px; border: 2px dashed #667eea;">
                    <tr>
                      <td style="text-align: center;">
                        <p style="margin: 0 0 15px 0; color: #667eea; font-size: 18px; font-weight: bold;">üéüÔ∏è M√É BARCODE</p>
                        <p style="margin: 0 0 10px 0; color: #333333; font-size: 24px; font-weight: bold; letter-spacing: 2px;">${barcodeUrl.code}</p>
                        <img src="${barcodeUrl.barcode_url}" alt="Barcode" style="width: 250px; height: auto; margin: 10px 0;" />
                        <p style="margin: 10px 0 0 0; color: #666666; font-size: 13px; font-style: italic;">
                          ƒêem m√£ n√†y ƒë·∫øn qu·∫ßy giao d·ªãch ho·∫∑c nh√¢n vi√™n so√°t v√©
                        </p>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>

              <!-- Ticket Details -->
              <tr>
                <td style="padding: 30px;">
                  <h3 style="margin: 0 0 20px 0; color: #333333; font-size: 18px; border-bottom: 2px solid #667eea; padding-bottom: 10px;">
                    üìã Chi ti·∫øt ƒë·∫∑t v√©
                  </h3>
                  
                  <table role="presentation" style="width: 100%; border-collapse: collapse;">
                    <tr>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee;">
                        <strong style="color: #555555; font-size: 14px;">M√£ ƒë·∫∑t v√©:</strong>
                      </td>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee; text-align: right;">
                        <span style="color: #333333; font-size: 14px;">#${ticket.id}</span>
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee;">
                        <strong style="color: #555555; font-size: 14px;">üé¨ Phim:</strong>
                      </td>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee; text-align: right;">
                        <span style="color: #333333; font-size: 14px; font-weight: bold;">${movie.name}</span>
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee;">
                        <strong style="color: #555555; font-size: 14px;">üïê Th·ªùi gian chi·∫øu:</strong>
                      </td>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee; text-align: right;">
                        <span style="color: #333333; font-size: 14px;">${showtime.movie_start_time} - ${new Date(showtime.showtime_date).toLocaleDateString('vi-VN')}</span>
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee;">
                        <strong style="color: #555555; font-size: 14px;">üé≠ Ph√≤ng chi·∫øu:</strong>
                      </td>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee; text-align: right;">
                        <span style="color: #333333; font-size: 14px;">${hall.name}</span>
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee;">
                        <strong style="color: #555555; font-size: 14px;">üí∫ S·ªë gh·∫ø:</strong>
                      </td>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee; text-align: right;">
                        <span style="color: #667eea; font-size: 14px; font-weight: bold;">${seatNames}</span>
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee;">
                        <strong style="color: #555555; font-size: 14px;">üé´ S·ªë v√©:</strong>
                      </td>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee; text-align: right;">
                        <span style="color: #333333; font-size: 14px;">${ticket.seatBookings.length} v√©</span>
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee;">
                        <strong style="color: #555555; font-size: 14px;">üçø Th·ª©c ƒÉn k√®m:</strong>
                      </td>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee; text-align: right;">
                        <span style="color: #333333; font-size: 14px;">${foodList || 'Kh√¥ng c√≥'}</span>
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee;">
                        <strong style="color: #555555; font-size: 14px;">üìç ƒê·ªãa ch·ªâ:</strong>
                      </td>
                      <td style="padding: 12px 0; border-bottom: 1px solid #eeeeee; text-align: right;">
                        <span style="color: #333333; font-size: 14px;">${hall.theatre || 'ƒêang c·∫≠p nh·∫≠t'}</span>
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 15px 0 12px 0;">
                        <strong style="color: #333333; font-size: 16px;">üí∞ T·ªïng ti·ªÅn:</strong>
                      </td>
                      <td style="padding: 15px 0 12px 0; text-align: right;">
                        <span style="color: #e74c3c; font-size: 20px; font-weight: bold;">${ticket.total_price.toLocaleString('vi-VN')} ƒë</span>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>

              <!-- Customer Info -->
              <tr>
                <td style="padding: 0 30px 30px 30px;">
                  <h3 style="margin: 0 0 15px 0; color: #333333; font-size: 18px; border-bottom: 2px solid #667eea; padding-bottom: 10px;">
                    üë§ Th√¥ng tin ng∆∞·ªùi nh·∫≠n v√©
                  </h3>
                  <table role="presentation" style="width: 100%;">
                    <tr>
                      <td style="padding: 8px 0;">
                        <span style="color: #666666; font-size: 14px;">üìù H·ªç v√† t√™n:</span>
                        <strong style="color: #333333; font-size: 14px; margin-left: 10px;">${user.full_name}</strong>
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 8px 0;">
                        <span style="color: #666666; font-size: 14px;">üìû S·ªë ƒëi·ªán tho·∫°i:</span>
                        <strong style="color: #333333; font-size: 14px; margin-left: 10px;">${user.phone_number}</strong>
                      </td>
                    </tr>
                    <tr>
                      <td style="padding: 8px 0;">
                        <span style="color: #666666; font-size: 14px;">‚úâÔ∏è Email:</span>
                        <strong style="color: #333333; font-size: 14px; margin-left: 10px;">${user.email}</strong>
                      </td>
                    </tr>
                  </table>
                </td>
              </tr>

              <!-- Support Info -->
              <tr>
                <td style="background-color: #f8f9ff; padding: 25px 30px;">
                  <h3 style="margin: 0 0 15px 0; color: #667eea; font-size: 16px;">
                    üìû Li√™n h·ªá h·ªó tr·ª£
                  </h3>
                  <p style="margin: 0; color: #666666; font-size: 14px; line-height: 1.6;">
                    Trong tr∆∞·ªùng h·ª£p c·∫ßn h·ªó tr·ª£, vui l√≤ng d√πng ch√≠nh s·ªë ƒëi·ªán tho·∫°i ƒëƒÉng k√Ω t√†i kho·∫£n ƒë·ªÉ li√™n h·ªá t·ªïng ƒë√†i Cinezone.
                  </p>
                  <p style="margin: 10px 0 0 0; color: #333333; font-size: 16px;">
                    <strong>Hotline: <a href="tel:1900545441" style="color: #667eea; text-decoration: none;">1900 54 54 41</a></strong>
                  </p>
                </td>
              </tr>

              <!-- Footer -->
              <tr>
                <td style="background-color: #333333; padding: 20px; text-align: center;">
                  <p style="margin: 0; color: #ffffff; font-size: 13px;">
                    ¬© 2024 Cinezone. H·ªá th·ªëng ƒë·∫∑t v√© xem phim tr·ª±c tuy·∫øn.
                  </p>
                  <p style="margin: 10px 0 0 0; color: #999999; font-size: 12px;">
                    Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
                  </p>
                </td>
              </tr>

            </table>
          </td>
        </tr>
      </table>
    </body>
    </html>
    `;

    await this.mailerService.sendMail(
      user.email,
      `X√°c nh·∫≠n ƒë·∫∑t v√© Cinezone th√†nh c√¥ng - M√£ giao d·ªãch ${ticket.id}`,
      emailContent,
    );
    return {
      message:
        'X√°c nh·∫≠n ƒë·∫∑t v√© Cinezone th√†nh c√¥ng ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n',
    };
    // 6Ô∏è‚É£ Tr·∫£ v·ªÅ d·ªØ li·ªáu t·ªïng h·ª£p
    // return {
    //   id: ticket.id,
    //   seat_total_price: ticket.seat_total_price,
    //   concession_total_price: ticket.concession_total_price,
    //   total_price: ticket.total_price,

    //   movie,
    //   hall,
    //   showtime,
    //   barcode_url: barcodeUrl,
    //   seats: ticket.seatBookings.map((tsb) => ({
    //     id: tsb.seatBooking.id,
    //     seat: tsb.seatBooking.seat,
    //     status: tsb.seatBooking.status,
    //   })),

    //   concessions: ticket.concessions.map((c) => ({
    //     item: c.item,
    //     quantity: c.quantity,
    //     total_price: c.total_price,
    //   })),

    //   user: {
    //     id: user.id,
    //     username: user.full_name,
    //     email: user.email,
    //     phone_number: user.phone_number,
    //     avatar_url: user.avatar_url,
    //   },

    //   created_at: ticket.created_at,
    //   updated_at: ticket.updated_at,

    //   emailContent, // üëâ N·ªôi dung email b·∫°n c√≥ th·ªÉ g·ª≠i tr·ª±c ti·∫øp qua mail service
    // };
  }
}
